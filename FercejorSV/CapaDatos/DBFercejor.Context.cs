//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBSVFercejorEntities : DbContext
    {
        public DBSVFercejorEntities()
            : base("name=DBSVFercejorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CATEGORIAS> CATEGORIAS { get; set; }
        public virtual DbSet<COMPRA> COMPRA { get; set; }
        public virtual DbSet<DETALLE_COMPRA> DETALLE_COMPRA { get; set; }
        public virtual DbSet<DETALLE_VENTA> DETALLE_VENTA { get; set; }
        public virtual DbSet<GUIA_RUTA> GUIA_RUTA { get; set; }
        public virtual DbSet<PEDIDOS> PEDIDOS { get; set; }
        public virtual DbSet<PRODUCTOS> PRODUCTOS { get; set; }
        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<VENTAS> VENTAS { get; set; }
        public virtual DbSet<CLIENTES> CLIENTES { get; set; }
        public virtual DbSet<EMPLEADOS> EMPLEADOS { get; set; }
        public virtual DbSet<PROVEEDORES> PROVEEDORES { get; set; }
        public virtual DbSet<USUARIOS> USUARIOS { get; set; }
        public virtual DbSet<VistaClientes> VistaClientes { get; set; }
        public virtual DbSet<VistaCompras> VistaCompras { get; set; }
        public virtual DbSet<VistaDetallesCompra> VistaDetallesCompra { get; set; }
        public virtual DbSet<VistaDetallesVenta> VistaDetallesVenta { get; set; }
        public virtual DbSet<VistaEmpleados> VistaEmpleados { get; set; }
        public virtual DbSet<VistaGuias> VistaGuias { get; set; }
        public virtual DbSet<VistaProductos> VistaProductos { get; set; }
        public virtual DbSet<VistaProveedores> VistaProveedores { get; set; }
        public virtual DbSet<VistaUsuarios> VistaUsuarios { get; set; }
        public virtual DbSet<VistaVentas> VistaVentas { get; set; }
        public virtual DbSet<ObtenerProductosActivos> ObtenerProductosActivos { get; set; }
        public virtual DbSet<VistaPedidos> VistaPedidos { get; set; }
    
        public virtual ObjectResult<sp_listarEmpleados_Result> sp_listarEmpleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_listarEmpleados_Result>("sp_listarEmpleados");
        }
    
        public virtual ObjectResult<ObtenerClientesPorAnio_Result> ObtenerClientesPorAnio(Nullable<int> anio)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerClientesPorAnio_Result>("ObtenerClientesPorAnio", anioParameter);
        }
    
        public virtual ObjectResult<ObtenerEmpleadosPorLetra_Result> ObtenerEmpleadosPorLetra(string letraInicial)
        {
            var letraInicialParameter = letraInicial != null ?
                new ObjectParameter("letraInicial", letraInicial) :
                new ObjectParameter("letraInicial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEmpleadosPorLetra_Result>("ObtenerEmpleadosPorLetra", letraInicialParameter);
        }
    
        public virtual ObjectResult<ObtenerEmpleadosPorRol_Result> ObtenerEmpleadosPorRol(string nombreRol)
        {
            var nombreRolParameter = nombreRol != null ?
                new ObjectParameter("nombreRol", nombreRol) :
                new ObjectParameter("nombreRol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEmpleadosPorRol_Result>("ObtenerEmpleadosPorRol", nombreRolParameter);
        }
    
        public virtual ObjectResult<ObtenerProductoPorID_Result> ObtenerProductoPorID(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProductoPorID_Result>("ObtenerProductoPorID", idProductoParameter);
        }
    
        public virtual ObjectResult<ObtenerProductosPorNombre_Result> ObtenerProductosPorNombre(string nombreProducto)
        {
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("nombreProducto", nombreProducto) :
                new ObjectParameter("nombreProducto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProductosPorNombre_Result>("ObtenerProductosPorNombre", nombreProductoParameter);
        }
    
        public virtual ObjectResult<ObtenerProductosPorProveedor_Result> ObtenerProductosPorProveedor(string nombreProveedor)
        {
            var nombreProveedorParameter = nombreProveedor != null ?
                new ObjectParameter("nombreProveedor", nombreProveedor) :
                new ObjectParameter("nombreProveedor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProductosPorProveedor_Result>("ObtenerProductosPorProveedor", nombreProveedorParameter);
        }
    
        public virtual ObjectResult<ObtenerProductosPorStock_Result> ObtenerProductosPorStock(Nullable<int> stockMinimo)
        {
            var stockMinimoParameter = stockMinimo.HasValue ?
                new ObjectParameter("stockMinimo", stockMinimo) :
                new ObjectParameter("stockMinimo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProductosPorStock_Result>("ObtenerProductosPorStock", stockMinimoParameter);
        }
    
        public virtual ObjectResult<ObtenerProveedoresPorAnio_Result> ObtenerProveedoresPorAnio(Nullable<int> anio)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProveedoresPorAnio_Result>("ObtenerProveedoresPorAnio", anioParameter);
        }
    
        public virtual ObjectResult<ObtenerUltimosClientes_Result> ObtenerUltimosClientes(Nullable<int> cantidad)
        {
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerUltimosClientes_Result>("ObtenerUltimosClientes", cantidadParameter);
        }
    
        public virtual int sp_CrearPedido(Nullable<int> idUsuario, Nullable<int> idCliente, Nullable<int> prioridad, string tipoComprobante, Nullable<decimal> montoTotal, Nullable<System.DateTime> fechaRegistro)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var prioridadParameter = prioridad.HasValue ?
                new ObjectParameter("prioridad", prioridad) :
                new ObjectParameter("prioridad", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var montoTotalParameter = montoTotal.HasValue ?
                new ObjectParameter("montoTotal", montoTotal) :
                new ObjectParameter("montoTotal", typeof(decimal));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("fechaRegistro", fechaRegistro) :
                new ObjectParameter("fechaRegistro", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CrearPedido", idUsuarioParameter, idClienteParameter, prioridadParameter, tipoComprobanteParameter, montoTotalParameter, fechaRegistroParameter);
        }
    
        public virtual int sp_EliminarPedido(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("idPedido", idPedido) :
                new ObjectParameter("idPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarPedido", idPedidoParameter);
        }
    
        public virtual int sp_eliminarProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarProducto", idProductoParameter);
        }
    
        public virtual int sp_insertarProducto(Nullable<int> idCategoria, string nombreProducto, string descripcion, Nullable<int> stock, Nullable<decimal> precioMayoritario, Nullable<decimal> precioMinoritario, string estado)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("nombreProducto", nombreProducto) :
                new ObjectParameter("nombreProducto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var precioMayoritarioParameter = precioMayoritario.HasValue ?
                new ObjectParameter("precioMayoritario", precioMayoritario) :
                new ObjectParameter("precioMayoritario", typeof(decimal));
    
            var precioMinoritarioParameter = precioMinoritario.HasValue ?
                new ObjectParameter("precioMinoritario", precioMinoritario) :
                new ObjectParameter("precioMinoritario", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertarProducto", idCategoriaParameter, nombreProductoParameter, descripcionParameter, stockParameter, precioMayoritarioParameter, precioMinoritarioParameter, estadoParameter);
        }
    
        public virtual int sp_ModificarPedido(Nullable<int> idPedido, Nullable<int> idUsuario, Nullable<int> idCliente, Nullable<int> prioridad, string tipoComprobante, Nullable<decimal> montoTotal, Nullable<System.DateTime> fechaRegistro)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("idPedido", idPedido) :
                new ObjectParameter("idPedido", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var prioridadParameter = prioridad.HasValue ?
                new ObjectParameter("prioridad", prioridad) :
                new ObjectParameter("prioridad", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var montoTotalParameter = montoTotal.HasValue ?
                new ObjectParameter("montoTotal", montoTotal) :
                new ObjectParameter("montoTotal", typeof(decimal));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("fechaRegistro", fechaRegistro) :
                new ObjectParameter("fechaRegistro", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarPedido", idPedidoParameter, idUsuarioParameter, idClienteParameter, prioridadParameter, tipoComprobanteParameter, montoTotalParameter, fechaRegistroParameter);
        }
    
        public virtual int sp_modificarProducto(Nullable<int> idProducto, Nullable<int> idCategoria, string nombreProducto, string descripcion, Nullable<int> stock, Nullable<decimal> precioMayoritario, Nullable<decimal> precioMinoritario, string estado)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("nombreProducto", nombreProducto) :
                new ObjectParameter("nombreProducto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var precioMayoritarioParameter = precioMayoritario.HasValue ?
                new ObjectParameter("precioMayoritario", precioMayoritario) :
                new ObjectParameter("precioMayoritario", typeof(decimal));
    
            var precioMinoritarioParameter = precioMinoritario.HasValue ?
                new ObjectParameter("precioMinoritario", precioMinoritario) :
                new ObjectParameter("precioMinoritario", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_modificarProducto", idProductoParameter, idCategoriaParameter, nombreProductoParameter, descripcionParameter, stockParameter, precioMayoritarioParameter, precioMinoritarioParameter, estadoParameter);
        }
    }
}
